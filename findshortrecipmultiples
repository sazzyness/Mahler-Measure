# Working in integer polynomial ring, with variable z
R.<z> = PolynomialRing(ZZ)
# Booleans for debugging
debug = false
verbose = false
printPolys = false


# Function to find the Mahler measure of a reciprocal polynomial p
# Input: a reciprocal polynomial p
# Output: vector with Mahler measure and house of p
def findRecipMM(p):
    # converting p(z) to q(z + 1/z)
    R.<x,y> = PolynomialRing(ZZ)
    p = p.subs(z=y)
    p1 = y^2 - x*y + 1
    q = p.resultant(p1,y)

    q1 = derivative(q,x)

    # finding roots
    q = R(q/(gcd(q, q1)))
    roots = q.univariate_polynomial().roots(CC)
    deg = len(roots)

    # calculating Mahler measure and house
    mm = 1
    house = 0
    for i in range(deg):
        root = roots[i][0]
        theta = abs(root + sqrt(root^2 -4))/2
        new = max(theta, 1/theta)
        mm = mm*new
        if new>house:
            house = new

    return(mm, house)


# Function to find specific length reciprocal polynomials for given polynomial p
# Input: 
#  p: a reciprocal non-cyclotomic polynomial, with irreducible not a polynomial in z^2
#  targetlength: integer, the length of polynomials we are searching for
#  printMM: boolean, whether to print Mahler measure with output or not
def findshortrecipmultiples( p, targetlength, printMM ):
    import time
    start = time.time()
    
    # setup initial matrices
    maxlevel = targetlength
    if(targetlength % 2 != 0):
        maxlevel -= 1
    state = matrix(ZZ, maxlevel, 2, 0)
    
    # find cyclotomic factors of p
    p2 = p.subs(z=-z)
    p3 = p.subs(z=z^2)
    p4 = p.subs(z=-z^2)
    p5 = gcd(p, p2*p3*p4)
    # Remove cyclotomic factors of p, leaving the non-cyclotomic irreducible
    min_p = p/p5
    
    # find house and alpha
    g = p.roots(CC)
    size = len(g)
    house = 0

    for i in range(size):
        new = abs(g[i][0])
        if new > house:
            house = new
            alpha = g[i][0]
            
    # start at lowest level
    level = 1
    state[ 0 ] = [ 1, floor( log( targetlength - 1 ) / log(house) ) ]
    if(debug):
        print(state, "\n")
    while(level != 0):
        # if d_i > max_d_i, or e_i > 1
        if( state[ level-1 ][ 0 ] > state[ level-1 ][ 1 ]):
            if(debug and verbose):
                print("level: %s, line: %s" % (level, 22))
            # reduce level
            level = level-1
            if(level != 0):
                if(debug and verbose):
                    print("level: %s, line: %s" % (level, 26))
                # d_i + 1, or e_i + 2
                state[ level-1, 0 ] = state[ level-1 ][ 0 ] + 1 + ((level+1)%2)
                if(debug):
                    print(state, "\n")
        else:
            # if we have all d_i's, check gcd to make sure the polynomial we generate is primitive
            if( level == maxlevel - 1):
                if(debug and verbose):
                    print("level: %s, line: %s" % (level, 33))
                temp = gcd( state[ 0 ][ 0 ], state[ 2 ][ 0 ] )
                jump = floor((maxlevel - 3)/2)
                for j in range(jump+1):
                    temp = gcd( temp, state[ 2+j*2 ][ 0 ])
                if( temp != 1):
                    state[ level-1, 0 ] = state[ level-1 ][ 0 ] + 1
                    if(debug):
                        print(state, "\n")
            # if at max level, generate polynomial
            if( level == maxlevel):
                if(debug and verbose):
                    print("level: %s, line: %s" % (level, 44))
                testpoly = 1
                jump = floor((maxlevel-2)/2)
                for j in range(jump+1):
                    testpoly *= z^floor(state[ j*2 ][ 0 ])
                    testpoly += state[ j*2 + 1 ][ 0 ]
                    if(debug and printPolys):
                        print(testpoly, " line: 51")
                # if length is odd
                if( targetlength % 2 != 0):
                    for j in range(jump+1):
                        testpoly *= z^floor(state[maxlevel - 2 -2*j ][ 0 ])
                        if( maxlevel - 1 -2*j > 1):
                            testpoly += state[ maxlevel - 2 -2*j - 1 ][ 0 ]
                        else:
                            testpoly += 1
                        if(debug and printPolys):
                            print(testpoly, " line: 60")
                # if length is even
                else:
                    midsign = state[ maxlevel-1 ][ 0 ] * state[ maxlevel - 3 ][ 0 ]
                    jump = ceil((maxlevel-3)/2)
                    for j in range(jump):
                        if(debug and printPolys):
                            print("j: ", maxlevel - 3-2*j)
                        testpoly *= z^floor(state[ maxlevel - 4-2*j ][ 0 ])
                        if(debug and printPolys):
                            print(testpoly)
                        if( maxlevel - 3-2*j > 1):
                            testpoly += midsign* state[ maxlevel - 4-2*j - 1 ][ 0 ]
                            if(debug and printPolys):
                                print(testpoly)
                        else:
                            testpoly += midsign
                            if(debug and printPolys):
                                print(testpoly)
                if(debug and printPolys):
                        print(testpoly, " line: 71")
                # if generated polynomial is a multiple of min_p, return poly
                if gcd(min_p(z), testpoly(z)) != 1:
                    if printMM:
                        # find Mahler measure
                        mm = findRecipMM(testpoly)
                        print("Short poly: %s, Mahler Measure: %s" % (testpoly, mm[0]))
                    else:
                        print(testpoly)
                # e_i + 2   
                state[ level-1, 0 ] += 2
                if(debug):
                    print(state, "\n")
            # if not at max level
            else:
                level += 1
                # if at odd level (d_i level), reset d_i to 0, and calculate max_d_i
                if( level % 2 != 0):
                    if(debug and verbose):
                        print("level: %s, line: %s" % (level, 76))
                    state[ level-1, 0 ] = 0
                    Q = 1
                    jump = ceil((level-1)/2)
                    for j in range(jump):
                        Q *= alpha^state[ j*2 ][ 0 ]
                        Q += state[ j*2 + 1 ][ 0 ]
                    state[ level-1, 1 ] = floor(1e-10+ (log( targetlength - ceil(level/2) ) - log( abs(Q) )) / log(house) )
                    if(debug):
                        print(state, "\n")
                # if at even level (e_i level), e_i = -1, max_e_i = 1
                else:
                    if(debug and verbose):
                        print("level: %s, line: %s" % (level, 88))
                    state[ level-1, 0 ] = -1
                    state[ level-1, 1 ] = 1
                    if(debug):
                        print(state, "\n")
    
    end = time.time()
    timeTaken = end - start                    
    print('program end, time taken: ', timeTaken)  
